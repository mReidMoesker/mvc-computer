// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PcPartsDatabase.DAL;

#nullable disable

namespace PcPartsDatabase.DAL.Migrations
{
    [DbContext(typeof(PcPartsDatabaseDbContext))]
    [Migration("20250317000615_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PcPartsDatbase.Models.GraphicsCard", b =>
                {
                    b.Property<int>("GraphicsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GraphicsID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicCoreSpeed")
                        .HasColumnType("int");

                    b.Property<int>("GraphicMemoryMB")
                        .HasColumnType("int");

                    b.Property<string>("GraphicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicSpeed")
                        .HasColumnType("int");

                    b.HasKey("GraphicsID");

                    b.ToTable("GraphicsCards");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.OperatingSys", b =>
                {
                    b.Property<int>("OsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OsID"));

                    b.Property<bool>("IsOpenSource")
                        .HasColumnType("bit");

                    b.Property<string>("OsDeveloper")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OsID");

                    b.ToTable("OperatingSystem");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Processor", b =>
                {
                    b.Property<int>("ProcessorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessorID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CacheAmount")
                        .HasColumnType("int");

                    b.Property<int>("CoreNums")
                        .HasColumnType("int");

                    b.Property<int>("CoreSpeed")
                        .HasColumnType("int");

                    b.Property<string>("ProcessorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isOverclockable")
                        .HasColumnType("bit");

                    b.HasKey("ProcessorID");

                    b.ToTable("Processor");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Storage", b =>
                {
                    b.Property<int>("StorageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageID"));

                    b.Property<bool>("IsSolidState")
                        .HasColumnType("bit");

                    b.Property<int>("StorageAmount")
                        .HasColumnType("int");

                    b.Property<string>("StorageBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemID")
                        .HasColumnType("int");

                    b.HasKey("StorageID");

                    b.HasIndex("SystemID");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Sys", b =>
                {
                    b.Property<int>("SystemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SystemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemID");

                    b.ToTable("System");

                    b.HasDiscriminator().HasValue("Sys");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Computer", b =>
                {
                    b.HasBaseType("PcPartsDatbase.Models.Sys");

                    b.Property<string>("ComputerDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraphicsID")
                        .HasColumnType("int");

                    b.Property<int>("OsID")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorID")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GraphicsID");

                    b.HasIndex("OsID");

                    b.HasIndex("ProcessorID");

                    b.HasDiscriminator().HasValue("Computer");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Storage", b =>
                {
                    b.HasOne("PcPartsDatbase.Models.Computer", null)
                        .WithMany("Storage")
                        .HasForeignKey("SystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Computer", b =>
                {
                    b.HasOne("PcPartsDatbase.Models.GraphicsCard", "GraphicsCard")
                        .WithMany()
                        .HasForeignKey("GraphicsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PcPartsDatbase.Models.OperatingSys", "OperatingSystems")
                        .WithMany()
                        .HasForeignKey("OsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PcPartsDatbase.Models.Processor", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraphicsCard");

                    b.Navigation("OperatingSystems");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("PcPartsDatbase.Models.Computer", b =>
                {
                    b.Navigation("Storage");
                });
#pragma warning restore 612, 618
        }
    }
}
